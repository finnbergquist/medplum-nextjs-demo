{
  "resourceType": "Bundle",
  "type": "transaction",
  "entry": [
    {
      "fullUrl": "urn:uuid:783f9857-5ca0-4dc8-9284-654873eb56c6",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/typescript",
        "data": "aW1wb3J0IHsgQm90RXZlbnQsIE1lZHBsdW1DbGllbnQsIHJlc29sdmVJZCB9IGZyb20gJ0BtZWRwbHVtL2NvcmUnOwppbXBvcnQgeyBBcHBvaW50bWVudCB9IGZyb20gJ0BtZWRwbHVtL2ZoaXJ0eXBlcyc7CgpleHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihtZWRwbHVtOiBNZWRwbHVtQ2xpZW50LCBldmVudDogQm90RXZlbnQ8QXBwb2ludG1lbnQ+KTogUHJvbWlzZTxBcHBvaW50bWVudD4gewogIGxldCBhcHBvaW50bWVudCA9IGV2ZW50LmlucHV0OwoKICAvLyBCYXNpYyBkYXRhIHZhbGlkYXRpb24KICBjb25zdCBzbG90SWQgPSByZXNvbHZlSWQoYXBwb2ludG1lbnQuc2xvdD8uWzBdKTsKICBpZiAoIXNsb3RJZCkgewogICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHByb3ZpZGUgYSBzbG90Jyk7CiAgfQoKICBpZiAoIWFwcG9pbnRtZW50LmFwcG9pbnRtZW50VHlwZSkgewogICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHByb3ZpZGUgYW4gYXBwb2ludG1lbnQgdHlwZScpOwogIH0KCiAgaWYgKCFhcHBvaW50bWVudC5zZXJ2aWNlVHlwZSB8fCBhcHBvaW50bWVudC5zZXJ2aWNlVHlwZT8ubGVuZ3RoID09PSAwKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgcHJvdmlkZSBhIHNlcnZpY2UgdHlwZScpOwogIH0KCiAgaWYgKGFwcG9pbnRtZW50LnN0YXR1cyAhPT0gJ2Jvb2tlZCcpIHsKICAgIHRocm93IG5ldyBFcnJvcignQXBwb2ludG1lbnQgc3RhdHVzIG11c3QgYmUgImJvb2tlZCInKTsKICB9CgogIGNvbnN0IHNsb3QgPSBhd2FpdCBtZWRwbHVtLnJlYWRSZXNvdXJjZSgnU2xvdCcsIHNsb3RJZCk7CgogIC8vIENyZWF0ZSB0aGUgYXBwb2ludG1lbnQKICBhcHBvaW50bWVudC5zdGFydCA9IHNsb3Quc3RhcnQ7CiAgYXBwb2ludG1lbnQuZW5kID0gc2xvdC5lbmQ7CiAgYXBwb2ludG1lbnQgPSBhd2FpdCBtZWRwbHVtLmNyZWF0ZVJlc291cmNlKGFwcG9pbnRtZW50KTsKCiAgLy8gVXBkYXRlIHRoZSBzbG90IHN0YXR1cyB0byAnYnVzeScKICBzbG90LnN0YXR1cyA9ICdidXN5JzsKICBhd2FpdCBtZWRwbHVtLnVwZGF0ZVJlc291cmNlKHNsb3QpOwoKICByZXR1cm4gYXBwb2ludG1lbnQ7Cn0K"
      }
    },
    {
      "fullUrl": "urn:uuid:4238b745-f887-46b9-a87a-1b46bf66f0ac",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/javascript",
        "data": "InVzZSBzdHJpY3QiOwp2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5Owp2YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7CnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzOwp2YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsKdmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7CiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpCiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pOwp9Owp2YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4gewogIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSAib2JqZWN0IiB8fCB0eXBlb2YgZnJvbSA9PT0gImZ1bmN0aW9uIikgewogICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKQogICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KQogICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTsKICB9CiAgcmV0dXJuIHRvOwp9Owp2YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7CgovLyBzcmMvYm90cy9jb3JlL2Jvb2stYXBwb2ludG1lbnQudHMKdmFyIGJvb2tfYXBwb2ludG1lbnRfZXhwb3J0cyA9IHt9OwpfX2V4cG9ydChib29rX2FwcG9pbnRtZW50X2V4cG9ydHMsIHsKICBoYW5kbGVyOiAoKSA9PiBoYW5kbGVyCn0pOwptb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhib29rX2FwcG9pbnRtZW50X2V4cG9ydHMpOwp2YXIgaW1wb3J0X2NvcmUgPSByZXF1aXJlKCJAbWVkcGx1bS9jb3JlIik7CmFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIobWVkcGx1bSwgZXZlbnQpIHsKICBsZXQgYXBwb2ludG1lbnQgPSBldmVudC5pbnB1dDsKICBjb25zdCBzbG90SWQgPSAoMCwgaW1wb3J0X2NvcmUucmVzb2x2ZUlkKShhcHBvaW50bWVudC5zbG90Py5bMF0pOwogIGlmICghc2xvdElkKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoIk11c3QgcHJvdmlkZSBhIHNsb3QiKTsKICB9CiAgaWYgKCFhcHBvaW50bWVudC5hcHBvaW50bWVudFR5cGUpIHsKICAgIHRocm93IG5ldyBFcnJvcigiTXVzdCBwcm92aWRlIGFuIGFwcG9pbnRtZW50IHR5cGUiKTsKICB9CiAgaWYgKCFhcHBvaW50bWVudC5zZXJ2aWNlVHlwZSB8fCBhcHBvaW50bWVudC5zZXJ2aWNlVHlwZT8ubGVuZ3RoID09PSAwKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoIk11c3QgcHJvdmlkZSBhIHNlcnZpY2UgdHlwZSIpOwogIH0KICBpZiAoYXBwb2ludG1lbnQuc3RhdHVzICE9PSAiYm9va2VkIikgewogICAgdGhyb3cgbmV3IEVycm9yKCdBcHBvaW50bWVudCBzdGF0dXMgbXVzdCBiZSAiYm9va2VkIicpOwogIH0KICBjb25zdCBzbG90ID0gYXdhaXQgbWVkcGx1bS5yZWFkUmVzb3VyY2UoIlNsb3QiLCBzbG90SWQpOwogIGFwcG9pbnRtZW50LnN0YXJ0ID0gc2xvdC5zdGFydDsKICBhcHBvaW50bWVudC5lbmQgPSBzbG90LmVuZDsKICBhcHBvaW50bWVudCA9IGF3YWl0IG1lZHBsdW0uY3JlYXRlUmVzb3VyY2UoYXBwb2ludG1lbnQpOwogIHNsb3Quc3RhdHVzID0gImJ1c3kiOwogIGF3YWl0IG1lZHBsdW0udXBkYXRlUmVzb3VyY2Uoc2xvdCk7CiAgcmV0dXJuIGFwcG9pbnRtZW50Owp9Ci8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZToKMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7CiAgaGFuZGxlcgp9KTsKT2JqZWN0LmFzc2lnbihleHBvcnRzLCBtb2R1bGUuZXhwb3J0cyk7Cg=="
      }
    },
    {
      "request": {
        "method": "PUT",
        "url": "$bot-book-appointment-reference"
      },
      "resource": {
        "resourceType": "Bot",
        "id": "$bot-book-appointment-id",
        "identifier": [
          {
            "system": "http://example.com",
            "value": "book-appointment"
          }
        ],
        "name": "book-appointment",
        "runtimeVersion": "awslambda",
        "sourceCode": {
          "contentType": "text/typescript",
          "url": "urn:uuid:783f9857-5ca0-4dc8-9284-654873eb56c6"
        },
        "executableCode": {
          "contentType": "text/javascript",
          "url": "urn:uuid:4238b745-f887-46b9-a87a-1b46bf66f0ac"
        }
      }
    },
    {
      "fullUrl": "urn:uuid:3ef228e4-d2fc-4caa-ba5a-eb3e8e9ee75c",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/typescript",
        "data": "aW1wb3J0IHsgQm90RXZlbnQsIE1lZHBsdW1DbGllbnQsIHJlc29sdmVJZCB9IGZyb20gJ0BtZWRwbHVtL2NvcmUnOwppbXBvcnQgeyBBcHBvaW50bWVudCwgQnVuZGxlLCBCdW5kbGVFbnRyeSwgU2xvdCB9IGZyb20gJ0BtZWRwbHVtL2ZoaXJ0eXBlcyc7CgpleHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihtZWRwbHVtOiBNZWRwbHVtQ2xpZW50LCBldmVudDogQm90RXZlbnQ8QXBwb2ludG1lbnQ+KTogUHJvbWlzZTxCdW5kbGU+IHsKICBjb25zdCBhcHBvaW50bWVudCA9IGV2ZW50LmlucHV0OwoKICAvLyBCYXNpYyBkYXRhIHZhbGlkYXRpb24KICBjb25zdCBzbG90SWQgPSByZXNvbHZlSWQoYXBwb2ludG1lbnQuc2xvdD8uWzBdKTsKICBpZiAoIXNsb3RJZCkgewogICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHByb3ZpZGUgYSBzbG90Jyk7CiAgfQoKICBjb25zdCBlbnRyaWVzOiBCdW5kbGVFbnRyeVtdID0gW107CgogIC8vIENoYW5nZSB0aGUgYXBwb2ludG1lbnQgc3RhdHVzIHRvICdjYW5jZWxsZWQnCiAgYXBwb2ludG1lbnQuc3RhdHVzID0gJ2NhbmNlbGxlZCc7CiAgYXBwb2ludG1lbnQuY2FuY2VsYXRpb25SZWFzb24gPSB7CiAgICBjb2Rpbmc6IFsKICAgICAgewogICAgICAgIHN5c3RlbTogJ2h0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYXBwb2ludG1lbnQtY2FuY2VsbGF0aW9uLXJlYXNvbicsCiAgICAgICAgY29kZTogJ3Byb3YnLAogICAgICAgIGRpc3BsYXk6ICdQcm92aWRlcicsCiAgICAgIH0sCiAgICBdLAogIH07CiAgZW50cmllcy5wdXNoKHsKICAgIHJlcXVlc3Q6IHsKICAgICAgbWV0aG9kOiAnUFVUJywKICAgICAgdXJsOiBgQXBwb2ludG1lbnQ/X2lkPSR7YXBwb2ludG1lbnQuaWR9YCwKICAgIH0sCiAgICByZXNvdXJjZTogYXBwb2ludG1lbnQsCiAgfSk7CgogIC8vIEluc3RlYWQgb2YgdW5saW5raW5nIHRoZSBvcmlnaW5hbCBzbG90LCBjcmVhdGUgYSBuZXcgc2xvdCB3aXRoIHN0YXR1cyAnZnJlZScKICAvLyBzbyBpdCBjYW4gYmUgYm9va2VkIGFnYWluCiAgY29uc3Qgc2xvdCA9IGF3YWl0IG1lZHBsdW0ucmVhZFJlc291cmNlKCdTbG90Jywgc2xvdElkKTsKICBjb25zdCBleGlzdGluZ0ZyZWVTbG90ID0gYXdhaXQgbWVkcGx1bS5zZWFyY2hPbmUoJ1Nsb3QnLCB7CiAgICBzdGFydDogc2xvdC5zdGFydCwKICAgIHN0YXR1czogJ2ZyZWUnLAogIH0pOwogIGlmICghZXhpc3RpbmdGcmVlU2xvdCkgewogICAgY29uc3QgbmV3U2xvdDogU2xvdCA9IHsgLi4uc2xvdCwgaWQ6IHVuZGVmaW5lZCwgc3RhdHVzOiAnZnJlZScgfTsKICAgIGVudHJpZXMucHVzaCh7CiAgICAgIHJlcXVlc3Q6IHsKICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICB1cmw6ICdTbG90JywKICAgICAgfSwKICAgICAgcmVzb3VyY2U6IG5ld1Nsb3QsCiAgICB9KTsKICB9CgogIC8vIEV4ZWN1dGUgdGhlIGJhdGNoIHRvIGNyZWF0ZS91cGRhdGUgYWxsIHJlc291cmNlcyBhdCBvbmNlCiAgY29uc3QgcmVzcG9uc2VCdW5kbGUgPSBhd2FpdCBtZWRwbHVtLmV4ZWN1dGVCYXRjaCh7CiAgICByZXNvdXJjZVR5cGU6ICdCdW5kbGUnLAogICAgdHlwZTogJ2JhdGNoJywKICAgIGVudHJ5OiBlbnRyaWVzLAogIH0pOwogIHJldHVybiByZXNwb25zZUJ1bmRsZTsKfQo="
      }
    },
    {
      "fullUrl": "urn:uuid:98c8fe66-a0f0-4ead-a1c4-a75860ffbc25",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/javascript",
        "data": "InVzZSBzdHJpY3QiOwp2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5Owp2YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7CnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzOwp2YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsKdmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7CiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpCiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pOwp9Owp2YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4gewogIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSAib2JqZWN0IiB8fCB0eXBlb2YgZnJvbSA9PT0gImZ1bmN0aW9uIikgewogICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKQogICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KQogICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTsKICB9CiAgcmV0dXJuIHRvOwp9Owp2YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7CgovLyBzcmMvYm90cy9jb3JlL2NhbmNlbC1hcHBvaW50bWVudC50cwp2YXIgY2FuY2VsX2FwcG9pbnRtZW50X2V4cG9ydHMgPSB7fTsKX19leHBvcnQoY2FuY2VsX2FwcG9pbnRtZW50X2V4cG9ydHMsIHsKICBoYW5kbGVyOiAoKSA9PiBoYW5kbGVyCn0pOwptb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhjYW5jZWxfYXBwb2ludG1lbnRfZXhwb3J0cyk7CnZhciBpbXBvcnRfY29yZSA9IHJlcXVpcmUoIkBtZWRwbHVtL2NvcmUiKTsKYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihtZWRwbHVtLCBldmVudCkgewogIGNvbnN0IGFwcG9pbnRtZW50ID0gZXZlbnQuaW5wdXQ7CiAgY29uc3Qgc2xvdElkID0gKDAsIGltcG9ydF9jb3JlLnJlc29sdmVJZCkoYXBwb2ludG1lbnQuc2xvdD8uWzBdKTsKICBpZiAoIXNsb3RJZCkgewogICAgdGhyb3cgbmV3IEVycm9yKCJNdXN0IHByb3ZpZGUgYSBzbG90Iik7CiAgfQogIGNvbnN0IGVudHJpZXMgPSBbXTsKICBhcHBvaW50bWVudC5zdGF0dXMgPSAiY2FuY2VsbGVkIjsKICBhcHBvaW50bWVudC5jYW5jZWxhdGlvblJlYXNvbiA9IHsKICAgIGNvZGluZzogWwogICAgICB7CiAgICAgICAgc3lzdGVtOiAiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9hcHBvaW50bWVudC1jYW5jZWxsYXRpb24tcmVhc29uIiwKICAgICAgICBjb2RlOiAicHJvdiIsCiAgICAgICAgZGlzcGxheTogIlByb3ZpZGVyIgogICAgICB9CiAgICBdCiAgfTsKICBlbnRyaWVzLnB1c2goewogICAgcmVxdWVzdDogewogICAgICBtZXRob2Q6ICJQVVQiLAogICAgICB1cmw6IGBBcHBvaW50bWVudD9faWQ9JHthcHBvaW50bWVudC5pZH1gCiAgICB9LAogICAgcmVzb3VyY2U6IGFwcG9pbnRtZW50CiAgfSk7CiAgY29uc3Qgc2xvdCA9IGF3YWl0IG1lZHBsdW0ucmVhZFJlc291cmNlKCJTbG90Iiwgc2xvdElkKTsKICBjb25zdCBleGlzdGluZ0ZyZWVTbG90ID0gYXdhaXQgbWVkcGx1bS5zZWFyY2hPbmUoIlNsb3QiLCB7CiAgICBzdGFydDogc2xvdC5zdGFydCwKICAgIHN0YXR1czogImZyZWUiCiAgfSk7CiAgaWYgKCFleGlzdGluZ0ZyZWVTbG90KSB7CiAgICBjb25zdCBuZXdTbG90ID0geyAuLi5zbG90LCBpZDogdm9pZCAwLCBzdGF0dXM6ICJmcmVlIiB9OwogICAgZW50cmllcy5wdXNoKHsKICAgICAgcmVxdWVzdDogewogICAgICAgIG1ldGhvZDogIlBPU1QiLAogICAgICAgIHVybDogIlNsb3QiCiAgICAgIH0sCiAgICAgIHJlc291cmNlOiBuZXdTbG90CiAgICB9KTsKICB9CiAgY29uc3QgcmVzcG9uc2VCdW5kbGUgPSBhd2FpdCBtZWRwbHVtLmV4ZWN1dGVCYXRjaCh7CiAgICByZXNvdXJjZVR5cGU6ICJCdW5kbGUiLAogICAgdHlwZTogImJhdGNoIiwKICAgIGVudHJ5OiBlbnRyaWVzCiAgfSk7CiAgcmV0dXJuIHJlc3BvbnNlQnVuZGxlOwp9Ci8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZToKMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7CiAgaGFuZGxlcgp9KTsKT2JqZWN0LmFzc2lnbihleHBvcnRzLCBtb2R1bGUuZXhwb3J0cyk7Cg=="
      }
    },
    {
      "request": {
        "method": "PUT",
        "url": "$bot-cancel-appointment-reference"
      },
      "resource": {
        "resourceType": "Bot",
        "id": "$bot-cancel-appointment-id",
        "identifier": [
          {
            "system": "http://example.com",
            "value": "cancel-appointment"
          }
        ],
        "name": "cancel-appointment",
        "runtimeVersion": "awslambda",
        "sourceCode": {
          "contentType": "text/typescript",
          "url": "urn:uuid:3ef228e4-d2fc-4caa-ba5a-eb3e8e9ee75c"
        },
        "executableCode": {
          "contentType": "text/javascript",
          "url": "urn:uuid:98c8fe66-a0f0-4ead-a1c4-a75860ffbc25"
        }
      }
    },
    {
      "fullUrl": "urn:uuid:e728b5ff-8842-4247-8619-f493944b835e",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/typescript",
        "data": "aW1wb3J0IHsgQm90RXZlbnQsIE1lZHBsdW1DbGllbnQgfSBmcm9tICdAbWVkcGx1bS9jb3JlJzsKaW1wb3J0IHsgQnVuZGxlLCBCdW5kbGVFbnRyeSwgUmVmZXJlbmNlLCBSZXNvdXJjZSwgU2NoZWR1bGUsIFNsb3QgfSBmcm9tICdAbWVkcGx1bS9maGlydHlwZXMnOwoKZXhwb3J0IGludGVyZmFjZSBTZXRBdmFpbGFiaWxpdHlFdmVudCB7CiAgc2NoZWR1bGU6IFJlZmVyZW5jZTxTY2hlZHVsZT47CiAgc3RhcnREYXRlOiBzdHJpbmc7CiAgZW5kRGF0ZTogc3RyaW5nOwogIHN0YXJ0VGltZTogc3RyaW5nOwogIGVuZFRpbWU6IHN0cmluZzsKICBkdXJhdGlvbjogbnVtYmVyOwogIGRheXNPZldlZWs6IHN0cmluZ1tdOwogIHRpbWV6b25lT2Zmc2V0OiBudW1iZXI7Cn0KCmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKG1lZHBsdW06IE1lZHBsdW1DbGllbnQsIGV2ZW50OiBCb3RFdmVudDxTZXRBdmFpbGFiaWxpdHlFdmVudD4pOiBQcm9taXNlPEJ1bmRsZT4gewogIGNvbnN0IHsgc2NoZWR1bGUsIHN0YXJ0RGF0ZSwgZW5kRGF0ZSwgc3RhcnRUaW1lLCBlbmRUaW1lLCBkdXJhdGlvbiwgZGF5c09mV2VlaywgdGltZXpvbmVPZmZzZXQgfSA9IGV2ZW50LmlucHV0OwoKICAvLyBCYXNpYyBkYXRhIHZhbGlkYXRpb24KICBpZiAoZHVyYXRpb24gPD0gMCkgewogICAgdGhyb3cgbmV3IEVycm9yKCdEdXJhdGlvbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7CiAgfQogIGlmIChuZXcgRGF0ZShlbmREYXRlKSA8IG5ldyBEYXRlKHN0YXJ0RGF0ZSkpIHsKICAgIHRocm93IG5ldyBFcnJvcignRW5kIGRhdGUgbXVzdCBiZSBhZnRlciBzdGFydCBkYXRlJyk7CiAgfQoKICAvLyBNYXAgZGF5c09mV2VlayB0byB0aGVpciBjb3JyZXNwb25kaW5nIGRheSBudW1iZXJzCiAgY29uc3QgZGF5TnVtYmVycyA9IGRheXNPZldlZWsubWFwKChkYXkpID0+IGRheU9mV2Vla01hcFtkYXkudG9Mb3dlckNhc2UoKV0pOwoKICAvLyBCdWxrIGNyZWF0ZSBmcmVlIHNsb3RzCiAgY29uc3QgZW50cmllczogQnVuZGxlRW50cnlbXSA9IFtdOwoKICBjb25zdCBlbmQgPSBuZXcgRGF0ZShlbmREYXRlKTsKICBsZXQgY3VycmVudERhdGUgPSBuZXcgRGF0ZShzdGFydERhdGUpOwoKICB3aGlsZSAoY3VycmVudERhdGUgPD0gZW5kKSB7CiAgICBpZiAoZGF5TnVtYmVycy5pbmNsdWRlcyhjdXJyZW50RGF0ZS5nZXRVVENEYXkoKSkpIHsKICAgICAgY29uc3QgZGF5U3RhcnRUaW1lID0gbmV3IERhdGUoY3VycmVudERhdGUpOwogICAgICBjb25zdCBkYXlFbmRUaW1lID0gbmV3IERhdGUoY3VycmVudERhdGUpOwoKICAgICAgLy8gU2V0IHRoZSBzdGFydCBhbmQgZW5kIHRpbWVzIGZvciB0aGUgZGF5CiAgICAgIGNvbnN0IFtzdGFydEhvdXIsIHN0YXJ0TWludXRlXSA9IHN0YXJ0VGltZS5zcGxpdCgnOicpLm1hcChOdW1iZXIpOwogICAgICBjb25zdCBbZW5kSG91ciwgZW5kTWludXRlXSA9IGVuZFRpbWUuc3BsaXQoJzonKS5tYXAoTnVtYmVyKTsKCiAgICAgIGRheVN0YXJ0VGltZS5zZXRIb3VycyhzdGFydEhvdXIsIHN0YXJ0TWludXRlLCAwLCAwKTsKICAgICAgZGF5RW5kVGltZS5zZXRIb3VycyhlbmRIb3VyLCBlbmRNaW51dGUsIDAsIDApOwoKICAgICAgLy8gQWRqdXN0IGZvciB0aW1lem9uZSBvZmZzZXQKICAgICAgZGF5U3RhcnRUaW1lLnNldE1pbnV0ZXMoZGF5U3RhcnRUaW1lLmdldE1pbnV0ZXMoKSArIHRpbWV6b25lT2Zmc2V0KTsKICAgICAgZGF5RW5kVGltZS5zZXRNaW51dGVzKGRheUVuZFRpbWUuZ2V0TWludXRlcygpICsgdGltZXpvbmVPZmZzZXQpOwoKICAgICAgbGV0IGN1cnJlbnRTbG90VGltZSA9IG5ldyBEYXRlKGRheVN0YXJ0VGltZSk7CgogICAgICAvLyBDcmVhdGUgc2xvdHMgd2l0aGluIHRoZSBzcGVjaWZpZWQgdGltZSB3aW5kb3cKICAgICAgd2hpbGUgKGN1cnJlbnRTbG90VGltZSA8IGRheUVuZFRpbWUpIHsKICAgICAgICBjb25zdCBzbG90RW5kVGltZSA9IG5ldyBEYXRlKGN1cnJlbnRTbG90VGltZS5nZXRUaW1lKCkgKyBkdXJhdGlvbiAqIDYwMDAwKTsKCiAgICAgICAgLy8gRW5zdXJlIHRoYXQgdGhlIHNsb3QgZG9lcyBub3QgZXhjZWVkIHRoZSBlbmQgdGltZQogICAgICAgIGlmIChzbG90RW5kVGltZSA8PSBkYXlFbmRUaW1lKSB7CiAgICAgICAgICBjb25zdCBzbG90ID0gY3JlYXRlRnJlZVNsb3Qoc2NoZWR1bGUsIGN1cnJlbnRTbG90VGltZSwgZHVyYXRpb24pOwogICAgICAgICAgZW50cmllcy5wdXNoKGNyZWF0ZUVudHJ5KHNsb3QpKTsKICAgICAgICB9CgogICAgICAgIC8vIE1vdmUgdG8gdGhlIG5leHQgc2xvdAogICAgICAgIGN1cnJlbnRTbG90VGltZSA9IG5ldyBEYXRlKGN1cnJlbnRTbG90VGltZS5nZXRUaW1lKCkgKyBkdXJhdGlvbiAqIDYwMDAwKTsKICAgICAgfQogICAgfQogICAgLy8gTW92ZSB0byB0aGUgbmV4dCBkYXkKICAgIGN1cnJlbnREYXRlID0gbmV3IERhdGUoY3VycmVudERhdGUuc2V0VVRDRGF0ZShjdXJyZW50RGF0ZS5nZXRVVENEYXRlKCkgKyAxKSk7CiAgfQoKICAvLyBFeGVjdXRlIGJhdGNoIHRvIGNyZWF0ZSBhbGwgc2xvdHMgYXQgb25jZQogIGNvbnN0IHJlc3BvbnNlQnVuZGxlID0gYXdhaXQgbWVkcGx1bS5leGVjdXRlQmF0Y2goewogICAgcmVzb3VyY2VUeXBlOiAnQnVuZGxlJywKICAgIHR5cGU6ICdiYXRjaCcsCiAgICBlbnRyeTogZW50cmllcywKICB9KTsKICByZXR1cm4gcmVzcG9uc2VCdW5kbGU7Cn0KCmNvbnN0IGRheU9mV2Vla01hcDogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHsKICBzdW46IDAsCiAgbW9uOiAxLAogIHR1ZTogMiwKICB3ZWQ6IDMsCiAgdGh1OiA0LAogIGZyaTogNSwKICBzYXQ6IDYsCn07CgpmdW5jdGlvbiBjcmVhdGVFbnRyeShyZXNvdXJjZTogUmVzb3VyY2UpOiBCdW5kbGVFbnRyeSB7CiAgcmV0dXJuIHsKICAgIHJlc291cmNlLAogICAgcmVxdWVzdDogewogICAgICB1cmw6IHJlc291cmNlLnJlc291cmNlVHlwZSwKICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICB9LAogIH07Cn0KCmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGcmVlU2xvdChzY2hlZHVsZTogUmVmZXJlbmNlPFNjaGVkdWxlPiwgc3RhcnQ6IERhdGUsIGR1cmF0aW9uOiBudW1iZXIpOiBTbG90IHsKICByZXR1cm4gewogICAgcmVzb3VyY2VUeXBlOiAnU2xvdCcsCiAgICBzY2hlZHVsZTogc2NoZWR1bGUsCiAgICBzdGFydDogc3RhcnQudG9JU09TdHJpbmcoKSwKICAgIGVuZDogbmV3IERhdGUoc3RhcnQuZ2V0VGltZSgpICsgZHVyYXRpb24gKiA2MDAwMCkudG9JU09TdHJpbmcoKSwKICAgIHN0YXR1czogJ2ZyZWUnLAogIH07Cn0K"
      }
    },
    {
      "fullUrl": "urn:uuid:8e9cb90a-9707-47cf-8d02-d762e33d0870",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/javascript",
        "data": "InVzZSBzdHJpY3QiOwp2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5Owp2YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7CnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzOwp2YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsKdmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7CiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpCiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pOwp9Owp2YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4gewogIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSAib2JqZWN0IiB8fCB0eXBlb2YgZnJvbSA9PT0gImZ1bmN0aW9uIikgewogICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKQogICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KQogICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTsKICB9CiAgcmV0dXJuIHRvOwp9Owp2YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7CgovLyBzcmMvYm90cy9jb3JlL3NldC1hdmFpbGFiaWxpdHkudHMKdmFyIHNldF9hdmFpbGFiaWxpdHlfZXhwb3J0cyA9IHt9OwpfX2V4cG9ydChzZXRfYXZhaWxhYmlsaXR5X2V4cG9ydHMsIHsKICBjcmVhdGVGcmVlU2xvdDogKCkgPT4gY3JlYXRlRnJlZVNsb3QsCiAgaGFuZGxlcjogKCkgPT4gaGFuZGxlcgp9KTsKbW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc2V0X2F2YWlsYWJpbGl0eV9leHBvcnRzKTsKYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihtZWRwbHVtLCBldmVudCkgewogIGNvbnN0IHsgc2NoZWR1bGUsIHN0YXJ0RGF0ZSwgZW5kRGF0ZSwgc3RhcnRUaW1lLCBlbmRUaW1lLCBkdXJhdGlvbiwgZGF5c09mV2VlaywgdGltZXpvbmVPZmZzZXQgfSA9IGV2ZW50LmlucHV0OwogIGlmIChkdXJhdGlvbiA8PSAwKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoIkR1cmF0aW9uIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXIiKTsKICB9CiAgaWYgKG5ldyBEYXRlKGVuZERhdGUpIDwgbmV3IERhdGUoc3RhcnREYXRlKSkgewogICAgdGhyb3cgbmV3IEVycm9yKCJFbmQgZGF0ZSBtdXN0IGJlIGFmdGVyIHN0YXJ0IGRhdGUiKTsKICB9CiAgY29uc3QgZGF5TnVtYmVycyA9IGRheXNPZldlZWsubWFwKChkYXkpID0+IGRheU9mV2Vla01hcFtkYXkudG9Mb3dlckNhc2UoKV0pOwogIGNvbnN0IGVudHJpZXMgPSBbXTsKICBjb25zdCBlbmQgPSBuZXcgRGF0ZShlbmREYXRlKTsKICBsZXQgY3VycmVudERhdGUgPSBuZXcgRGF0ZShzdGFydERhdGUpOwogIHdoaWxlIChjdXJyZW50RGF0ZSA8PSBlbmQpIHsKICAgIGlmIChkYXlOdW1iZXJzLmluY2x1ZGVzKGN1cnJlbnREYXRlLmdldFVUQ0RheSgpKSkgewogICAgICBjb25zdCBkYXlTdGFydFRpbWUgPSBuZXcgRGF0ZShjdXJyZW50RGF0ZSk7CiAgICAgIGNvbnN0IGRheUVuZFRpbWUgPSBuZXcgRGF0ZShjdXJyZW50RGF0ZSk7CiAgICAgIGNvbnN0IFtzdGFydEhvdXIsIHN0YXJ0TWludXRlXSA9IHN0YXJ0VGltZS5zcGxpdCgiOiIpLm1hcChOdW1iZXIpOwogICAgICBjb25zdCBbZW5kSG91ciwgZW5kTWludXRlXSA9IGVuZFRpbWUuc3BsaXQoIjoiKS5tYXAoTnVtYmVyKTsKICAgICAgZGF5U3RhcnRUaW1lLnNldEhvdXJzKHN0YXJ0SG91ciwgc3RhcnRNaW51dGUsIDAsIDApOwogICAgICBkYXlFbmRUaW1lLnNldEhvdXJzKGVuZEhvdXIsIGVuZE1pbnV0ZSwgMCwgMCk7CiAgICAgIGRheVN0YXJ0VGltZS5zZXRNaW51dGVzKGRheVN0YXJ0VGltZS5nZXRNaW51dGVzKCkgKyB0aW1lem9uZU9mZnNldCk7CiAgICAgIGRheUVuZFRpbWUuc2V0TWludXRlcyhkYXlFbmRUaW1lLmdldE1pbnV0ZXMoKSArIHRpbWV6b25lT2Zmc2V0KTsKICAgICAgbGV0IGN1cnJlbnRTbG90VGltZSA9IG5ldyBEYXRlKGRheVN0YXJ0VGltZSk7CiAgICAgIHdoaWxlIChjdXJyZW50U2xvdFRpbWUgPCBkYXlFbmRUaW1lKSB7CiAgICAgICAgY29uc3Qgc2xvdEVuZFRpbWUgPSBuZXcgRGF0ZShjdXJyZW50U2xvdFRpbWUuZ2V0VGltZSgpICsgZHVyYXRpb24gKiA2ZTQpOwogICAgICAgIGlmIChzbG90RW5kVGltZSA8PSBkYXlFbmRUaW1lKSB7CiAgICAgICAgICBjb25zdCBzbG90ID0gY3JlYXRlRnJlZVNsb3Qoc2NoZWR1bGUsIGN1cnJlbnRTbG90VGltZSwgZHVyYXRpb24pOwogICAgICAgICAgZW50cmllcy5wdXNoKGNyZWF0ZUVudHJ5KHNsb3QpKTsKICAgICAgICB9CiAgICAgICAgY3VycmVudFNsb3RUaW1lID0gbmV3IERhdGUoY3VycmVudFNsb3RUaW1lLmdldFRpbWUoKSArIGR1cmF0aW9uICogNmU0KTsKICAgICAgfQogICAgfQogICAgY3VycmVudERhdGUgPSBuZXcgRGF0ZShjdXJyZW50RGF0ZS5zZXRVVENEYXRlKGN1cnJlbnREYXRlLmdldFVUQ0RhdGUoKSArIDEpKTsKICB9CiAgY29uc3QgcmVzcG9uc2VCdW5kbGUgPSBhd2FpdCBtZWRwbHVtLmV4ZWN1dGVCYXRjaCh7CiAgICByZXNvdXJjZVR5cGU6ICJCdW5kbGUiLAogICAgdHlwZTogImJhdGNoIiwKICAgIGVudHJ5OiBlbnRyaWVzCiAgfSk7CiAgcmV0dXJuIHJlc3BvbnNlQnVuZGxlOwp9CnZhciBkYXlPZldlZWtNYXAgPSB7CiAgc3VuOiAwLAogIG1vbjogMSwKICB0dWU6IDIsCiAgd2VkOiAzLAogIHRodTogNCwKICBmcmk6IDUsCiAgc2F0OiA2Cn07CmZ1bmN0aW9uIGNyZWF0ZUVudHJ5KHJlc291cmNlKSB7CiAgcmV0dXJuIHsKICAgIHJlc291cmNlLAogICAgcmVxdWVzdDogewogICAgICB1cmw6IHJlc291cmNlLnJlc291cmNlVHlwZSwKICAgICAgbWV0aG9kOiAiUE9TVCIKICAgIH0KICB9Owp9CmZ1bmN0aW9uIGNyZWF0ZUZyZWVTbG90KHNjaGVkdWxlLCBzdGFydCwgZHVyYXRpb24pIHsKICByZXR1cm4gewogICAgcmVzb3VyY2VUeXBlOiAiU2xvdCIsCiAgICBzY2hlZHVsZSwKICAgIHN0YXJ0OiBzdGFydC50b0lTT1N0cmluZygpLAogICAgZW5kOiBuZXcgRGF0ZShzdGFydC5nZXRUaW1lKCkgKyBkdXJhdGlvbiAqIDZlNCkudG9JU09TdHJpbmcoKSwKICAgIHN0YXR1czogImZyZWUiCiAgfTsKfQovLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6CjAgJiYgKG1vZHVsZS5leHBvcnRzID0gewogIGNyZWF0ZUZyZWVTbG90LAogIGhhbmRsZXIKfSk7Ck9iamVjdC5hc3NpZ24oZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMpOwo="
      }
    },
    {
      "request": {
        "method": "PUT",
        "url": "$bot-set-availability-reference"
      },
      "resource": {
        "resourceType": "Bot",
        "id": "$bot-set-availability-id",
        "identifier": [
          {
            "system": "http://example.com",
            "value": "set-availability"
          }
        ],
        "name": "set-availability",
        "runtimeVersion": "awslambda",
        "sourceCode": {
          "contentType": "text/typescript",
          "url": "urn:uuid:e728b5ff-8842-4247-8619-f493944b835e"
        },
        "executableCode": {
          "contentType": "text/javascript",
          "url": "urn:uuid:8e9cb90a-9707-47cf-8d02-d762e33d0870"
        }
      }
    },
    {
      "fullUrl": "urn:uuid:0d12d6d9-1ba0-4381-9b71-b0e5686ecea7",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/typescript",
        "data": "aW1wb3J0IHsgTWVkcGx1bUNsaWVudCwgQm90RXZlbnQgfSBmcm9tICdAbWVkcGx1bS9jb3JlJzsKaW1wb3J0IHsgQXBwb2ludG1lbnQsIEJ1bmRsZSwgQnVuZGxlRW50cnksIFJlZmVyZW5jZSwgU2NoZWR1bGUsIFNsb3QgfSBmcm9tICdAbWVkcGx1bS9maGlydHlwZXMnOwoKZXhwb3J0IGludGVyZmFjZSBCbG9ja0F2YWlsYWJpbGl0eUV2ZW50IHsKICBzY2hlZHVsZTogUmVmZXJlbmNlPFNjaGVkdWxlPjsKICBzdGFydDogc3RyaW5nOwogIGVuZDogc3RyaW5nOwp9CgpleHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihtZWRwbHVtOiBNZWRwbHVtQ2xpZW50LCBldmVudDogQm90RXZlbnQ8QmxvY2tBdmFpbGFiaWxpdHlFdmVudD4pOiBQcm9taXNlPEJ1bmRsZT4gewogIGNvbnN0IHsgc2NoZWR1bGUsIHN0YXJ0LCBlbmQgfSA9IGV2ZW50LmlucHV0OwoKICAvLyBCYXNpYyBkYXRhIHZhbGlkYXRpb24KICBpZiAobmV3IERhdGUoZW5kKSA8IG5ldyBEYXRlKHN0YXJ0KSkgewogICAgdGhyb3cgbmV3IEVycm9yKCdFbmQgZGF0ZSBtdXN0IGJlIGFmdGVyIHN0YXJ0IGRhdGUnKTsKICB9CgogIGNvbnN0IGVudHJpZXM6IEJ1bmRsZUVudHJ5W10gPSBbXTsKCiAgLy8gQ3JlYXRlIGEgU2xvdCB3aXRoIHN0YXR1cyAnYnVzeS11bmF2YWlsYWJsZScgZm9yIHRoZSBwZXJpb2QKICBjb25zdCBibG9ja2VkU2xvdDogU2xvdCA9IHsKICAgIHJlc291cmNlVHlwZTogJ1Nsb3QnLAogICAgc2NoZWR1bGU6IHNjaGVkdWxlLAogICAgc3RhcnQ6IHN0YXJ0LAogICAgZW5kOiBlbmQsCiAgICBzdGF0dXM6ICdidXN5LXVuYXZhaWxhYmxlJywKICB9OwogIGVudHJpZXMucHVzaCh7CiAgICByZXF1ZXN0OiB7CiAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICB1cmw6ICdTbG90JywKICAgIH0sCiAgICByZXNvdXJjZTogYmxvY2tlZFNsb3QsCiAgfSk7CgogIC8vIENhbmNlbCBib29rZWQgYXBwb2ludG1lbnRzIHRoYXQgb3ZlcmxhcCB0aGUgcGVyaW9kCiAgY29uc3QgYXBwb2ludG1lbnRzVG9DYW5jZWw6IEFwcG9pbnRtZW50W10gPSBhd2FpdCBtZWRwbHVtLnNlYXJjaFJlc291cmNlcygKICAgICdBcHBvaW50bWVudCcsCiAgICBgZGF0ZT1sdCR7ZW5kfSZkYXRlPWdlJHtzdGFydH0mc3RhdHVzPWJvb2tlZGAKICApOwogIGVudHJpZXMucHVzaCgKICAgIC4uLmFwcG9pbnRtZW50c1RvQ2FuY2VsLm1hcCgKICAgICAgKGFwcG9pbnRtZW50KTogQnVuZGxlRW50cnkgPT4gKHsKICAgICAgICByZXF1ZXN0OiB7CiAgICAgICAgICBtZXRob2Q6ICdQVVQnLAogICAgICAgICAgdXJsOiBgQXBwb2ludG1lbnQ/X2lkPSR7YXBwb2ludG1lbnQuaWR9YCwKICAgICAgICB9LAogICAgICAgIHJlc291cmNlOiB7CiAgICAgICAgICAuLi5hcHBvaW50bWVudCwKICAgICAgICAgIHN0YXR1czogJ2NhbmNlbGxlZCcsCiAgICAgICAgICBjYW5jZWxhdGlvblJlYXNvbjogewogICAgICAgICAgICBjb2Rpbmc6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzeXN0ZW06ICdodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2FwcG9pbnRtZW50LWNhbmNlbGxhdGlvbi1yZWFzb24nLAogICAgICAgICAgICAgICAgY29kZTogJ3Byb3YnLAogICAgICAgICAgICAgICAgZGlzcGxheTogJ1Byb3ZpZGVyJywKICAgICAgICAgICAgICB9LAogICAgICAgICAgICBdLAogICAgICAgICAgfSwKICAgICAgICB9LAogICAgICB9KQogICAgKQogICk7CgogIC8vIEJsb2NrIGZyZWUgc2xvdHMgdGhhdCBvdmVybGFwIHRoZSBwZXJpb2QKICBjb25zdCBmcmVlU2xvdHNUb0Jsb2NrOiBTbG90W10gPSBhd2FpdCBtZWRwbHVtLnNlYXJjaFJlc291cmNlcygKICAgICdTbG90JywKICAgIGBzY2hlZHVsZT0ke3NjaGVkdWxlLnJlZmVyZW5jZX0mc3RhcnQ9bHQke2VuZH0mc3RhcnQ9Z2Uke3N0YXJ0fSZzdGF0dXM9ZnJlZWAKICApOwogIGVudHJpZXMucHVzaCgKICAgIC4uLmZyZWVTbG90c1RvQmxvY2subWFwKAogICAgICAoc2xvdCk6IEJ1bmRsZUVudHJ5ID0+ICh7CiAgICAgICAgcmVxdWVzdDogewogICAgICAgICAgbWV0aG9kOiAnUFVUJywKICAgICAgICAgIHVybDogYFNsb3Q/X2lkPSR7c2xvdC5pZH1gLAogICAgICAgIH0sCiAgICAgICAgcmVzb3VyY2U6IHsKICAgICAgICAgIC4uLnNsb3QsCiAgICAgICAgICBzdGF0dXM6ICdidXN5LXVuYXZhaWxhYmxlJywKICAgICAgICB9LAogICAgICB9KQogICAgKQogICk7CgogIC8vIEV4ZWN1dGUgdGhlIGJhdGNoIHRvIGNyZWF0ZS91cGRhdGUgYWxsIHJlc291cmNlcyBhdCBvbmNlCiAgY29uc3QgcmVzcG9uc2VCdW5kbGUgPSBhd2FpdCBtZWRwbHVtLmV4ZWN1dGVCYXRjaCh7CiAgICByZXNvdXJjZVR5cGU6ICdCdW5kbGUnLAogICAgdHlwZTogJ2JhdGNoJywKICAgIGVudHJ5OiBlbnRyaWVzLAogIH0pOwogIHJldHVybiByZXNwb25zZUJ1bmRsZTsKfQo="
      }
    },
    {
      "fullUrl": "urn:uuid:f6c3b380-d7ff-4e7d-8184-e9082c80296e",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/javascript",
        "data": "InVzZSBzdHJpY3QiOwp2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5Owp2YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7CnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzOwp2YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsKdmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7CiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpCiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pOwp9Owp2YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4gewogIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSAib2JqZWN0IiB8fCB0eXBlb2YgZnJvbSA9PT0gImZ1bmN0aW9uIikgewogICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKQogICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KQogICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTsKICB9CiAgcmV0dXJuIHRvOwp9Owp2YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7CgovLyBzcmMvYm90cy9jb3JlL2Jsb2NrLWF2YWlsYWJpbGl0eS50cwp2YXIgYmxvY2tfYXZhaWxhYmlsaXR5X2V4cG9ydHMgPSB7fTsKX19leHBvcnQoYmxvY2tfYXZhaWxhYmlsaXR5X2V4cG9ydHMsIHsKICBoYW5kbGVyOiAoKSA9PiBoYW5kbGVyCn0pOwptb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhibG9ja19hdmFpbGFiaWxpdHlfZXhwb3J0cyk7CmFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIobWVkcGx1bSwgZXZlbnQpIHsKICBjb25zdCB7IHNjaGVkdWxlLCBzdGFydCwgZW5kIH0gPSBldmVudC5pbnB1dDsKICBpZiAobmV3IERhdGUoZW5kKSA8IG5ldyBEYXRlKHN0YXJ0KSkgewogICAgdGhyb3cgbmV3IEVycm9yKCJFbmQgZGF0ZSBtdXN0IGJlIGFmdGVyIHN0YXJ0IGRhdGUiKTsKICB9CiAgY29uc3QgZW50cmllcyA9IFtdOwogIGNvbnN0IGJsb2NrZWRTbG90ID0gewogICAgcmVzb3VyY2VUeXBlOiAiU2xvdCIsCiAgICBzY2hlZHVsZSwKICAgIHN0YXJ0LAogICAgZW5kLAogICAgc3RhdHVzOiAiYnVzeS11bmF2YWlsYWJsZSIKICB9OwogIGVudHJpZXMucHVzaCh7CiAgICByZXF1ZXN0OiB7CiAgICAgIG1ldGhvZDogIlBPU1QiLAogICAgICB1cmw6ICJTbG90IgogICAgfSwKICAgIHJlc291cmNlOiBibG9ja2VkU2xvdAogIH0pOwogIGNvbnN0IGFwcG9pbnRtZW50c1RvQ2FuY2VsID0gYXdhaXQgbWVkcGx1bS5zZWFyY2hSZXNvdXJjZXMoCiAgICAiQXBwb2ludG1lbnQiLAogICAgYGRhdGU9bHQke2VuZH0mZGF0ZT1nZSR7c3RhcnR9JnN0YXR1cz1ib29rZWRgCiAgKTsKICBlbnRyaWVzLnB1c2goCiAgICAuLi5hcHBvaW50bWVudHNUb0NhbmNlbC5tYXAoCiAgICAgIChhcHBvaW50bWVudCkgPT4gKHsKICAgICAgICByZXF1ZXN0OiB7CiAgICAgICAgICBtZXRob2Q6ICJQVVQiLAogICAgICAgICAgdXJsOiBgQXBwb2ludG1lbnQ/X2lkPSR7YXBwb2ludG1lbnQuaWR9YAogICAgICAgIH0sCiAgICAgICAgcmVzb3VyY2U6IHsKICAgICAgICAgIC4uLmFwcG9pbnRtZW50LAogICAgICAgICAgc3RhdHVzOiAiY2FuY2VsbGVkIiwKICAgICAgICAgIGNhbmNlbGF0aW9uUmVhc29uOiB7CiAgICAgICAgICAgIGNvZGluZzogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN5c3RlbTogImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYXBwb2ludG1lbnQtY2FuY2VsbGF0aW9uLXJlYXNvbiIsCiAgICAgICAgICAgICAgICBjb2RlOiAicHJvdiIsCiAgICAgICAgICAgICAgICBkaXNwbGF5OiAiUHJvdmlkZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KQogICAgKQogICk7CiAgY29uc3QgZnJlZVNsb3RzVG9CbG9jayA9IGF3YWl0IG1lZHBsdW0uc2VhcmNoUmVzb3VyY2VzKAogICAgIlNsb3QiLAogICAgYHNjaGVkdWxlPSR7c2NoZWR1bGUucmVmZXJlbmNlfSZzdGFydD1sdCR7ZW5kfSZzdGFydD1nZSR7c3RhcnR9JnN0YXR1cz1mcmVlYAogICk7CiAgZW50cmllcy5wdXNoKAogICAgLi4uZnJlZVNsb3RzVG9CbG9jay5tYXAoCiAgICAgIChzbG90KSA9PiAoewogICAgICAgIHJlcXVlc3Q6IHsKICAgICAgICAgIG1ldGhvZDogIlBVVCIsCiAgICAgICAgICB1cmw6IGBTbG90P19pZD0ke3Nsb3QuaWR9YAogICAgICAgIH0sCiAgICAgICAgcmVzb3VyY2U6IHsKICAgICAgICAgIC4uLnNsb3QsCiAgICAgICAgICBzdGF0dXM6ICJidXN5LXVuYXZhaWxhYmxlIgogICAgICAgIH0KICAgICAgfSkKICAgICkKICApOwogIGNvbnN0IHJlc3BvbnNlQnVuZGxlID0gYXdhaXQgbWVkcGx1bS5leGVjdXRlQmF0Y2goewogICAgcmVzb3VyY2VUeXBlOiAiQnVuZGxlIiwKICAgIHR5cGU6ICJiYXRjaCIsCiAgICBlbnRyeTogZW50cmllcwogIH0pOwogIHJldHVybiByZXNwb25zZUJ1bmRsZTsKfQovLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6CjAgJiYgKG1vZHVsZS5leHBvcnRzID0gewogIGhhbmRsZXIKfSk7Ck9iamVjdC5hc3NpZ24oZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMpOwo="
      }
    },
    {
      "request": {
        "method": "PUT",
        "url": "$bot-block-availability-reference"
      },
      "resource": {
        "resourceType": "Bot",
        "id": "$bot-block-availability-id",
        "identifier": [
          {
            "system": "http://example.com",
            "value": "block-availability"
          }
        ],
        "name": "block-availability",
        "runtimeVersion": "awslambda",
        "sourceCode": {
          "contentType": "text/typescript",
          "url": "urn:uuid:0d12d6d9-1ba0-4381-9b71-b0e5686ecea7"
        },
        "executableCode": {
          "contentType": "text/javascript",
          "url": "urn:uuid:f6c3b380-d7ff-4e7d-8184-e9082c80296e"
        }
      }
    },
    {
      "fullUrl": "urn:uuid:56556a96-88dc-4c49-8bed-4a7f73d69a23",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/typescript",
        "data": ""
      }
    },
    {
      "fullUrl": "urn:uuid:64acdec2-3e9f-45fb-a0ad-f666da7c7234",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/javascript",
        "data": ""
      }
    },
    {
      "request": {
        "method": "PUT",
        "url": "$bot-example-data-reference"
      },
      "resource": {
        "resourceType": "Bot",
        "id": "$bot-example-data-id",
        "identifier": [
          {
            "system": "http://example.com",
            "value": "example-data"
          }
        ],
        "name": "example-data",
        "runtimeVersion": "awslambda",
        "sourceCode": {
          "contentType": "text/typescript",
          "url": "urn:uuid:56556a96-88dc-4c49-8bed-4a7f73d69a23"
        },
        "executableCode": {
          "contentType": "text/javascript",
          "url": "urn:uuid:64acdec2-3e9f-45fb-a0ad-f666da7c7234"
        }
      }
    }
  ]
}